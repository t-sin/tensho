{"version":3,"sources":["src/invader_game/game_scene/constant.js","src/invader_game/game_scene/state.js","src/invader_game/game_scene/draw.js","src/invader_game/game_scene/cannon.js","src/invader_game/game_scene/invader.js","src/invader_game/game_scene/shot.js","src/invader_game/game_scene/ufo.js","src/invader_game/game_scene/torchka.js","src/invader_game/game_scene/index.js","src/invader_game/title_scene/logo.js","src/invader_game/title_scene/index.js","src/invader_game/index.js","src/tensho.js"],"names":["GAME_INITIALIZING","GAME_PLAYING","GAME_PLAYER_DEFEATED","GAME_PLAYER_WON","CANNON_DISABLED","CANNON_ALIVE","CANNON_DYING","CANNON_SHOT_DISABLED","CANNON_SHOT_MOVING","CANNON_SHOT_DYING","INVADER_SHOT_DISABLED","INVADER_SHOT_MOVING","INVADER_SHOT_DYING","INVADER_DISABLED","INVADER_ALIVE","INVADER_DYING","UFO_DISABLED","UFO_ALIVE","UFO_DYING","ufo_dying_anim_pattern","cannon_alive_anim_pattern","cannon_dying_anim_pattern","invader_anim_pattern","invader_shot_anim_pattern","torchka_pattern","score","invader","ufo","config","rows","columns","edge","top","bottom","left","right","str","interval","initial","x","Math","floor","y","speed","hit","offset","size","w","h","cannon","shot","invaders","topleft","move_per_frames","torchka","toplefts","dot","scale","constant","require","setup_state","state","row","col","frames","kind","changed_at","go_title","type","ptr","table","current_char","life","char","array","cdot","j","length","i","j2","abs","enabled","push","number_of_alive","current","direction_right","ix","iy","n","random","to_shot","debug","msg","alive","most_left","most_right","lefts","rights","bottoms","current_invader","draw_ground","game","ctx","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","draw_cannon","ch","font","fillStyle","fillText","fillRect","draw_cannon_shot","cx","cy","draw_torchka","save","restore","draw_invaders","draw_invader_shots","sx","sy","draw_ufo","s","ox","oy","nf","Intl","NumberFormat","minimumIntegerDigits","useGrouping","draw_ui","format","hiscore","draw_debug","input","most_bottom","reduce","acc","e","proc","clearRect","canvas","width","height","move_cannon","update_cannon","index","iterate_all_invaders","fn","rest","make_alive_checker","left_alive_idx","right_alive_idx","first_alive_idx","last_alive_idx","left_alives","Array","right_alives","bottom_alives","check_alive","idx","get_alive_idx","sort","a","b","first","last","reset_alive_checker","fill","check_one_invader","is_hit","shot_hit_x","shot_hit_y","invader_hit","kill_invader","can_shoot","bottom_idx","shoot","collide_with_torchka","box","ihit","dhit","y_in_invader","update_one_invader","turn","cannon_shot_moving","move","on_edge","edge_left","edge_right","on_left_edge","on_right_edge","to_right","next_invader_idx","init","all_invaders","invader_reached_ground","concat","first_invader_idx","on_first_invader_moving","move_cannon_shot","move_invader_shot","kill_cannon","detect_hit_invader_shot","cannon_hit","x1","x2","y1","y2","detect_hit_with_invader_and_cannon_shot","cannon_shot","invader_shot","hit_x","hit_y","move_ufo","update_ufo","detect_hit_by_cannon_shot","ufo_hit","iterate_torchka_dots","in_area_fn","collide_fn","invader_shot_in_box","result","shot_hit","in_x","in_y","dot_hit","cannon_shot_in_box","detect_hit_cannon_shot","in_box","collide","draw","game_state","new_state","elapsed","m","slice","make_scene","frame_fn","go_title_scene","data","logo","char1","char_pos","disp_v","ready","v","sin","scene1","scene2","go_game_scene","game_scene","title_scene","setup","document","getElementById","getContext","addEventListener","code","scene","start","window","requestAnimationFrame","invader_game"],"mappings":"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,CAClB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAI,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,IAC1P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAC1P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAI,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3P,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,E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","file":"tensho.12594633.js","sourceRoot":"..","sourcesContent":["export const GAME_INITIALIZING = 'initializing';\nexport const GAME_PLAYING = 'playing';\nexport const GAME_PLAYER_DEFEATED = 'player defeated';\nexport const GAME_PLAYER_WON = 'player won';\n\nexport const CANNON_DISABLED = 'disabled';\nexport const CANNON_ALIVE = 'alive';\nexport const CANNON_DYING = 'dying';\n\nexport const CANNON_SHOT_DISABLED = 'disabled';\nexport const CANNON_SHOT_MOVING = 'moving';\nexport const CANNON_SHOT_DYING = 'dying';\n\nexport const INVADER_SHOT_DISABLED = 'disabled';\nexport const INVADER_SHOT_MOVING = 'moving';\nexport const INVADER_SHOT_DYING = 'dying';\n\nexport const INVADER_DISABLED = 'disabled';\nexport const INVADER_ALIVE = 'alive';\nexport const INVADER_DYING = 'dying';\n\nexport const UFO_DISABLED = 'disabled';\nexport const UFO_ALIVE = 'alive';\nexport const UFO_DYING = 'dying';\n\nexport const ufo_dying_anim_pattern = '⺍丷';\n\nexport const cannon_alive_anim_pattern = '凸';\nexport const cannon_dying_anim_pattern = '⺍丷';\n\nexport const invader_anim_pattern = [\n  \"閧闘\",\n  \"閧闘\",\n  \"莔莤\",\n  \"莔莤\",\n  \"余会\",\n];\n\nexport const invader_shot_anim_pattern = [\n  '⦚⧘⸾', // NotoSans, \n  '⭭⭽', // NotoSansSymbol2\n];\n\nexport const torchka_pattern = [\n  ['門', '門', '門', '門', '　', '門', '門', '門', '門'],\n  ['門', '　', '　', '門', '　', '門', '　', '　', '門'],\n  ['門', '門', '門', '門', '　', '門', '門', '門', '門'],\n  ['門', '　', '　', '門', '　', '門', '　', '　', '門'],\n  ['門', '門', '門', '門', '　', '門', '門', '門', '門'],\n  ['門', '　', '　', '　', '　', '　', '　', '　', '門'],\n  ['門', '　', '問', '問', '問', '問', '問', '　', '門'],\n  ['門', '　', '問', '　', '　', '　', '問', '　', '門'],\n  ['門', '　', '問', '閂', '閂', '閂', '問', '　', '門'],\n  ['門', '　', '問', '　', '　', '　', '問', '　', '門'],\n  ['門', '　', '問', '問', '問', '問', '問', '　', '門'],\n];\n\nexport const score = {\n  invader: [\n    10,\n    10,\n    20,\n    20,\n    30,\n  ],\n  ufo: [\n    100, 50, 100, 300, 50, 50, 100, 500, 100, 300, 150, 300, 50, 100, 50, 150, 300,\n  ],\n};\n\nexport const config = {\n  rows: 5,\n  columns: 11,\n  edge: {\n    top: 30,\n    bottom: 440,\n    left: 70,\n    right: 570,\n  },\n};\n\n\nexport const ufo = {\n  str: [\n    '文字渦',\n    '円城塔',\n  ],\n  interval: 60 * 15,\n  initial: { x: [50 - Math.floor(18 * 1.5), 570 - Math.floor(18 * 1.5)], y: 70 },\n  speed: { x: 2 },\n  hit: {\n    offset: { x: 0, y: -15 },\n    size: { w: 20 * 2.5, h: 20 },\n  },\n};\n\nexport const cannon = {\n  initial: { x: 320, y: 430 },\n  speed: { x: 5 },\n  hit: {\n    offset: { x: -3, y: 20 },\n    size: { w: 20, h: 20 },\n  },\n  shot: {\n    hit: {\n      offset: { x: 7, y: 20 },\n    },\n  },\n};\n\nexport const invaders = {\n  initial: {\n    topleft: { x: 130, y: 100 },\n    offset: { x: 35, y: 29 },\n  },\n  speed: { x: 5, y: 20 },\n  move_per_frames: 2,\n  hit: {\n    offset: { x: 3, y: -20 },\n    size: { w: 20, h: 20 },\n  },\n  size: 25,\n  shot: {\n    hit: {\n      offset: { x: 10, y: 30 },\n    },\n  },\n};\n\nexport const torchka = {\n  toplefts: [\n    { x: 100, y: 330 },\n    { x: 220, y: 330 },\n    { x: 340, y: 330 },\n    { x: 460, y: 330 },\n  ],\n  dot: {\n    scale: { x: 1, y: 0.4 },\n    offset: { x: 2, y: 0 },\n    size: { w: 10, h: 12 },\n  },\n};\n","const constant = require('./constant.js');\n\nexport const setup_state = () => {\n  let state = {\n    frames: 1,\n    score: 0,\n\n    kind: constant.GAME_INITIALIZING,\n    changed_at: 0,\n\n    go_title: false,\n  };\n\n  state.ufo = {\n    x: 0, y: constant.ufo.initial.y,\n    type: 1,\n    score: {\n      ptr: -1,\n      table: constant.score.ufo,\n    },\n    current_char: 0,\n    state: {\n      kind: constant.UFO_DISABLED,\n      changed_at: 0,\n    },\n  };\n\n  state.cannon = {\n    life: 3,\n    x: constant.cannon.initial.x,\n    y: constant.cannon.initial.y,\n    char: constant.cannon_alive_anim_pattern,\n    current_char: 0,\n    state: {\n      kind: constant.CANNON_ALIVE,\n      changed_at: 0,\n    },\n    shot: {\n      x: 0, y: 0,\n      state: {\n        kind: constant.CANNON_SHOT_DISABLED,\n        changed_at: 0,\n      },\n    },\n  };\n\n  state.torchka = {\n    array: [],\n  };\n\n  let row, col;\n  const cdot = constant.torchka.dot;\n  for (let topleft of constant.torchka.toplefts) {\n    row = [];\n    for (let j = 0; j < constant.torchka_pattern.length; j++) {\n      col = [];\n      for (let i = 0; i < constant.torchka_pattern[0].length; i++) {\n        let j2 = Math.abs(constant.torchka_pattern.length - 1 - j);\n        let dot = {\n          i: i, j: j2,\n          x: topleft.x + i * cdot.size.w * 0.9,\n          y: topleft.y + j2 * cdot.size.h * cdot.scale.y,\n          enabled: constant.torchka_pattern[j2][i] == '　' ? false : true,\n        };\n\n        col.push(dot);\n      }\n      row.push(col);\n    }\n    state.torchka.array.push(row);\n  }\n\n  state.invaders = {\n    array: [],\n    number_of_alive: 0,\n    current: 0,\n    direction_right: true,\n    shot: [],\n  };\n\n  const ix = constant.invaders.initial.topleft.x;\n  const iy = constant.invaders.initial.topleft.y;\n\n  for (let j = 0; j < constant.config.rows; j++) {\n    for (let i = 0; i < constant.config.columns; i++) {\n      const n = Math.floor(Math.random() * constant.invader_shot_anim_pattern.length);\n      const invader = {\n        x: ix + constant.invaders.initial.offset.x * i,\n        y: iy + constant.invaders.initial.offset.y * (5 - j),\n        char: constant.invader_anim_pattern[j],\n        current_char: 0,\n        state: {\n          kind: constant.INVADER_DISABLED,\n          changed_at: 0,\n        },\n        to_shot: Math.floor(Math.random() * 200 + 50),\n      };\n      state.invaders.array.push(invader);\n\n      if (j == 0) {\n        const shot = {\n          x: 0, y: 0,\n          char: constant.invader_shot_anim_pattern[n],\n          current_char: 0,\n          state: {\n            kind: constant.INVADER_SHOT_DISABLED,\n            changed_at: 0,\n          },\n        };\n        state.invaders.shot.push(shot);\n      }\n    }\n  }\n\n  state.debug = {\n    msg: '',\n    invaders: {\n      alive: {\n        most_left: { i: -1, j: -1 },\n        most_right: { i: -1, j: -1 },\n        lefts: [],\n        rights: [],\n        bottoms: [],\n      }\n    }\n  };\n\n  return state;\n};\n\nexport const current_invader = (state) => {\n  const { i, j } = state.invaders.current;\n  return state.invaders.array[j][i];\n};\n","const constant = require('./constant.js');\n\nconst draw_ground = (game, state) => {\n  game.ctx.strokeStyle = '#444';\n  game.ctx.lineWidth = 1;\n  game.ctx.beginPath();\n  const y = constant.config.edge.bottom + 0.5;\n  game.ctx.moveTo(60, y);\n  game.ctx.lineTo(580, y);\n  game.ctx.stroke();\n};\n\nconst draw_cannon = (game, state) => {\n  game.ctx.font = '25px Noto Sans JP';\n  game.ctx.fillStyle = '#000';\n\n  let ch;\n  if (state.cannon.state.kind == constant.CANNON_ALIVE) {\n    ch = constant.cannon_alive_anim_pattern;\n  } else if (state.cannon.state.kind == constant.CANNON_DYING) {\n    ch = constant.cannon_dying_anim_pattern[state.cannon.current_char];\n  }\n\n  game.ctx.fillText(ch, state.cannon.x - 5, state.cannon.y);\n\n  if (game.debug) {\n    const { x, y } = constant.cannon.hit.offset;\n    game.ctx.fillStyle = 'rgba(255, 0, 0, 0.2)';\n    game.ctx.fillRect(\n      state.cannon.x + constant.cannon.hit.offset.x,\n      state.cannon.y - constant.cannon.hit.offset.y,\n      constant.cannon.hit.size.w, constant.cannon.hit.size.h);\n  }\n};\n\nconst draw_cannon_shot = (game, state) => {\n  game.ctx.font = '25px Noto Sans JP';\n  game.ctx.fillStyle = '#000';\n  const cx = state.cannon.shot.x - 5;\n  const cy = state.cannon.shot.y + 10;\n\n  switch (state.cannon.shot.state.kind) {\n    case constant.CANNON_SHOT_MOVING:\n      game.ctx.fillText('｜', cx, cy);\n      break;\n    case constant.CANNON_SHOT_DYING:\n      game.ctx.fillText('⺣', cx, cy);\n      break;\n  }\n};\n\nconst draw_torchka = (game, state) => {\n  const cdot = constant.torchka.dot;\n  game.ctx.font = '11px Noto Sans JP';\n  game.ctx.fillStyle = '#000';\n  game.ctx.save();\n  if (!game.debug) {\n    game.ctx.scale(cdot.scale.x, cdot.scale.y);\n  }\n\n  for (let n = 0; n < state.torchka.array.length; n++) {\n    let torchka = state.torchka.array[n];\n    for (let row of torchka) {\n      for (let dot of row) {\n        if (!dot.enabled) {\n          continue;\n        }\n\n        if (game.debug) {\n          game.ctx.scale(cdot.scale.x, cdot.scale.y);\n          game.ctx.fillStyle = '#000';\n        }\n\n        const ch = constant.torchka_pattern[dot.j][dot.i];\n        const { x, y } = {\n          x: dot.x / cdot.scale.x,\n          y: dot.y / cdot.scale.y,\n        };\n        game.ctx.fillText(ch, x, y);\n\n        if (game.debug) {\n          game.ctx.restore();\n          game.ctx.save();\n          game.ctx.fillStyle = 'rgba(255, 0, 0, 0.2)';\n          const { w, h } = {\n            w: cdot.size.w * 0.8,\n            h: cdot.size.h,\n          };\n          game.ctx.fillRect(dot.x + cdot.offset.x, dot.y + cdot.offset.y - h, w, h);\n        }\n      }\n    }\n\n    if (game.debug) {\n      game.ctx.restore();\n      game.ctx.save();\n      game.ctx.fillStyle = 'rgba(0, 0, 255, 0.3)';\n      const { x, y } = constant.torchka.toplefts[n];\n      const { w, h } = {\n        w: torchka[0].length * constant.torchka.dot.size.w,\n        h: torchka.length * constant.torchka.dot.size.h * constant.torchka.dot.scale.y,\n      };\n      game.ctx.fillRect(x - 10, y - 10, w + 10, h + 10);\n    }\n  }\n\n  game.ctx.restore();\n};\n\nconst draw_invaders = (game, state) => {\n  game.ctx.font = '25px Noto Sans JP';\n\n  for (let invader of state.invaders.array) {\n    game.ctx.fillStyle = '#000';\n    if (invader.state.kind == constant.INVADER_ALIVE) {\n      const ch = invader.char[invader.current_char];\n      game.ctx.fillText(ch, invader.x, invader.y);\n\n      if (game.debug) {\n        game.ctx.fillStyle = 'rgba(255, 0, 0, 0.2)';\n        const { x, y } = constant.invaders.hit.offset;\n        const { w, h } = constant.invaders.hit.size;\n        game.ctx.fillRect(invader.x + x, invader.y + y, w, h);\n      }\n\n    } else if (invader.state.kind == constant.INVADER_DYING) {\n      let ch;\n      if (state.frames < invader.state.changed_at + 8) {\n        ch = '＊';\n      } else {\n        ch = '⁂';\n      }\n      game.ctx.fillText(ch, invader.x, invader.y);\n    }\n  }\n};\n\nconst draw_invader_shots = (game, state) => {\n  game.ctx.font = '25px Noto Sans JP';\n  game.ctx.fillStyle = '#000';\n\n  for (let shot of state.invaders.shot) {\n    let ch;\n    const { x, y } = constant.invaders.shot.hit.offset;\n    let sx = shot.x;\n    let sy = shot.y;\n\n    if (shot.state.kind == constant.INVADER_SHOT_MOVING) {\n      ch = shot.char[shot.current_char];\n      sx += x;\n      sy -= y;\n\n    } else if (shot.state.kind == constant.INVADER_SHOT_DYING) {\n      ch = '⺌';\n    } else {\n      ch = '';\n    }\n\n    game.ctx.fillText(ch, sx, sy);\n  }\n};\n\nconst draw_ufo = (game, state) => {\n  const ufo = state.ufo;\n  let { x, y } = ufo;\n  let s;\n\n  switch (ufo.state.kind) {\n  case constant.UFO_ALIVE:\n    s = constant.ufo.str[ufo.type];\n\n    if (game.debug) {\n      game.ctx.fillStyle = 'rgba(255, 0, 0, 0.2)';\n      const { x: ox , y: oy } = constant.ufo.hit.offset;\n      const { w, h } = constant.ufo.hit.size;\n      game.ctx.fillRect(x + ox, y + oy, w, h);\n    }\n\n    break;\n\n  case constant.UFO_DYING:\n    s = constant.ufo_dying_anim_pattern;\n    break;\n\n  default:\n    s = '';\n  }\n\n  game.ctx.font = '18px Noto Sans JP';\n  game.ctx.fillStyle = '#000';\n  game.ctx.fillText(s, x, y);\n};\n\nconst nf = new Intl.NumberFormat(\"ja-JP-u-nu-hanidec\", {minimumIntegerDigits: 5, useGrouping: false});\nconst draw_ui = (game, state) => {\n  game.ctx.font = '23px Noto Sans JP';\n  game.ctx.fillStyle = '#000';\n  game.ctx.fillText('凸', constant.config.edge.left, constant.config.edge.bottom + 25);\n  game.ctx.font = '18px Noto Sans JP';\n  let s = ` × ${state.cannon.life}`;\n  game.ctx.fillText(s, constant.config.edge.left + 30, constant.config.edge.bottom + 25);\n\n  const score = nf.format(state.score);\n  const hiscore = nf.format(game.hiscore);\n\n  s = `得点 ${score}　最高得点 ${hiscore}`\n  game.ctx.fillText(s, constant.config.edge.right - 320, constant.config.edge.bottom + 25);\n};\n\nconst draw_debug = (game, state) => {\n  game.ctx.strokeStyle = 'rgba(255, 0, 0, 0.2)';\n\n  game.ctx.beginPath();\n  game.ctx.moveTo(constant.config.edge.left, constant.config.edge.top + 0.5);\n  game.ctx.lineTo(constant.config.edge.right, constant.config.edge.top + 0.5);\n  game.ctx.stroke();\n\n  game.ctx.beginPath();\n  game.ctx.moveTo(constant.config.edge.right + 0.5, 0);\n  game.ctx.lineTo(constant.config.edge.right + 0.5, 500);\n  game.ctx.stroke();\n\n  game.ctx.beginPath();\n  game.ctx.moveTo(constant.config.edge.left + 0.5, 0);\n  game.ctx.lineTo(constant.config.edge.left + 0.5, 500);\n  game.ctx.stroke();\n\n  game.ctx.font = '12px Noto Sans JP';\n  game.ctx.fillStyle = 'rgba(255, 0, 0, 1)';\n  game.ctx.fillText(`key: left=${game.input.left}\nright=${game.input.right}\nshot=${game.input.shot}`, 0, 10);\n\n  game.ctx.fillText(`num=${state.invaders.number_of_alive} frames=${state.frames}`, 500, 10);\n\n  const left = state.debug.invaders.alive.most_left;\n  const right = state.debug.invaders.alive.most_right;\n  const bottom = state.debug.invaders.alive.most_bottom;\n  if (left == null) {\n    game.ctx.fillText(`most_left=null`, 0, 22);\n  } else {\n    game.ctx.fillText(`most_left=(${left.i}, ${left.j})`, 0, 22);\n  }\n  if (right == null) {\n    game.ctx.fillText(`most_right=null`, 0, 34);\n  } else {\n    game.ctx.fillText(`most_right=(${right.i}, ${right.j})`, 0, 34);\n  }\n  if (bottom == null) {\n    game.ctx.fillText(`most_bottom=null`, 0, 46);\n  } else {\n    game.ctx.fillText(`most_bottom=(${bottom.i}, ${bottom.j})`, 0, 46);\n  }\n\n  let s = state.debug.invaders.alive.lefts.reduce((acc, e) => (\n    acc + (e == null ? 'null, ' : `(${e.i} ${e.j}) `)\n  ), 'lefts=[') + ']';\n  game.ctx.fillText(s, 0, 58);\n  s = state.debug.invaders.alive.rights.reduce((acc, e) => (\n    acc + (e == null ? 'null, ' : `(${e.i} ${e.j}) `)\n  ), 'rights=[') + ']';\n  game.ctx.fillText(s, 0, 70);\n  s = state.debug.invaders.alive.bottoms.reduce((acc, e) => (\n    acc + (e == null ? 'null, ' : `(${e.i} ${e.j}) `)\n  ), 'bottoms=[') + ']';\n  game.ctx.fillText(s, 0, 82);\n  game.ctx.fillText(state.debug.msg, 0, 94);\n\n};\n\nexport const proc = (game, state) => {\n  game.ctx.clearRect(0, 0, game.canvas.width, game.canvas.height);\n  draw_ground(game, state);\n  draw_cannon(game, state);\n  draw_cannon_shot(game, state);\n  draw_torchka(game, state);\n  draw_invaders(game, state);\n  draw_invader_shots(game, state);\n  draw_ufo(game, state);\n  draw_ui(game, state);\n\n  if (game.debug) {\n    draw_debug(game, state);\n  }\n};\n","const constant = require('./constant.js');\n\nconst move_cannon = (game, state) => {\n  if (state.cannon.state.kind == constant.CANNON_ALIVE) {\n    if (game.input.left && state.cannon.x > constant.config.edge.left - 5) {\n      state.cannon.x -= constant.cannon.speed.x;\n    }\n\n    if (game.input.right && state.cannon.x < constant.config.edge.right - 5) {\n      state.cannon.x += constant.cannon.speed.x;\n    }\n  }\n};\n\nconst update_cannon = (game, state) => {\n  if (state.cannon.state.kind == constant.CANNON_DYING) {\n    if (state.frames > state.cannon.state.changed_at + 80) {\n      if (state.cannon.life == 0) {\n        state.kind = constant.GAME_PLAYER_DEFEATED;\n        state.changed_at = state.frames;\n      }\n      state.cannon.state.kind = constant.CANNON_ALIVE;\n    }\n\n    if (state.frames % 8 == 0 || false) {\n      state.cannon.current_char++;\n      state.cannon.current_char %= state.cannon.char.length;\n    }\n  }\n};\n\nexport const proc = (game, state) => {\n  move_cannon(game, state);\n  update_cannon(game, state);\n};\n","const constant = require('./constant.js');\n\nconst index = (i, j) => {\n  return j * constant.config.columns + i;\n};\n\nconst iterate_all_invaders = (fn, state, ...rest) => {\n  for (let j = 0; j < constant.config.rows; j++) {\n    for (let i = 0; i < constant.config.columns; i++) {\n      fn(state, i, j, state.invaders.array[index(i, j)], ...rest);\n    }\n  }\n};\n\nconst make_alive_checker = () => {\n  const rows = constant.config.rows;\n  const columns = constant.config.columns;\n  let left_alives = new Array(rows);\n  let right_alives = new Array(rows);\n  let bottom_alives = new Array(columns);\n  let left_alive_idx, right_alive_idx;\n  let first_alive_idx, last_alive_idx;\n\n  const reset_alive_checker = () => {\n    left_alives.fill(null);\n    right_alives.fill(null);\n    bottom_alives.fill(null);\n    first_alive_idx = -1;\n    last_alive_idx = -1;\n  };\n\n  const check_alive = (i, j, invader) => {\n    if (invader.state.kind == constant.INVADER_ALIVE) {\n      const idx = index(i, j);\n      last_alive_idx = idx\n\n      if (first_alive_idx == -1) {\n        first_alive_idx = idx;\n      }\n\n      if (left_alives[j] == null || i < left_alives[j].i) {\n        left_alives[j] = { i, j };\n      };\n\n      if (right_alives[j] == null || i > right_alives[j].i) {\n        right_alives[j] = { i, j };\n      };\n\n      if (bottom_alives[i] == null || j < bottom_alives[i].j) {\n        bottom_alives[i] = { i, j };\n      };\n    }\n  };\n\n  const get_alive_idx = (state) => {\n    left_alives.sort((a, b) => (a == null ? 1 : b == null ? -1 : b.i < a.i ? 1 : -1));\n    right_alives.sort((a, b) => (a == null ? 1 : b == null ? -1 : b.i > a.i ? 1 : -1));\n\n    state.debug.invaders.alive.lefts = left_alives;\n    state.debug.invaders.alive.rights = right_alives;\n    state.debug.invaders.alive.bottoms = bottom_alives;\n\n    left_alive_idx = left_alives[0];\n    right_alive_idx = right_alives[0];\n\n    return {\n      left: left_alive_idx,\n      right: right_alive_idx,\n      first: first_alive_idx,\n      last: last_alive_idx,\n      bottoms: bottom_alives,\n    };\n  };\n\n  return { check_alive, get_alive_idx, reset_alive_checker };\n};\nconst { reset_alive_checker, get_alive_idx, check_alive } = make_alive_checker();\n\nconst check_one_invader = (state, i, j, invader) => {\n  check_alive(i, j, invader);\n};\n\nconst is_hit = (shot, invader) => {\n  const shot_hit_x = shot.x + constant.cannon.shot.hit.offset.x;\n  const shot_hit_y = shot.y;\n  const invader_hit = {\n    x: invader.x + constant.invaders.hit.offset.x,\n    y: invader.y + constant.invaders.hit.offset.y,\n    w: constant.invaders.hit.size.w,\n    h: constant.invaders.hit.size.h,\n  };\n\n  const in_invader_x = invader_hit.x < shot_hit_x && shot_hit_x < invader_hit.x + invader_hit.w;\n  const in_invader_y = invader_hit.y < shot_hit_y && shot_hit_y < invader_hit.y + invader_hit.h;\n  const hit = in_invader_x && in_invader_y;\n\n  return hit;\n};\n\nconst kill_invader = (state, shot, i, j, invader) => {\n  if (invader.state.kind == constant.INVADER_ALIVE) {\n    state.score += constant.score.invader[j];\n    shot.state.kind = constant.CANNON_SHOT_DISABLED;\n    shot.state.changed_at = state.frames;\n\n    invader.state.kind = constant.INVADER_DYING;\n    invader.state.changed_at = state.frames;\n    state.invaders.number_of_alive--;\n  }\n};\n\nconst can_shoot = (state, bottom_idx, i, j, invader) => {\n  const cannon = state.cannon;\n    if (!(bottom_idx != null && i == bottom_idx.i && j == bottom_idx.j)) {\n    return false;\n  }\n\n  const shot = state.invaders.shot[i];\n  return (\n    cannon.state.kind == constant.CANNON_ALIVE &&\n    shot.state.kind == constant.INVADER_SHOT_DISABLED &&\n    invader.to_shot <= 0);\n};\n\nconst shoot = (state, invader, shot) => {\n  shot.state.kind = constant.INVADER_SHOT_MOVING;\n  shot.state.changed_at = state.frames;\n  shot.x = invader.x;\n  shot.y = invader.y + constant.invaders.shot.hit.offset.y;\n  invader.to_shot = Math.floor(Math.random() * 250 + 100);\n};\n\nconst collide_with_torchka = (state, invader) => {\n  for (let n = 0; n < state.torchka.array.length; n++) {\n    let torchka = state.torchka.array[n];\n\n    const topleft = constant.torchka.toplefts[n];\n    const box = {\n      x: topleft.x,\n      y: topleft.y,\n      w: torchka[0].length * constant.torchka.dot.size.w,\n      h: torchka.length * constant.torchka.dot.size.h * constant.torchka.dot.scale.y,\n    };\n    const ihit = {\n      x: invader.x + constant.invaders.hit.offset.x,\n      y: invader.y + constant.invaders.hit.offset.y,\n      w: constant.invaders.hit.size.w,\n      h: constant.invaders.hit.size.h,\n    };\n\n    let x_in_box, y_in_box;\n    if (box.x < ihit.x) {\n      x_in_box = box.x < ihit.x && ihit.x < box.x + box.w;\n    } else {\n      x_in_box = ihit.x < box.x && box.x < ihit.x + ihit.w;\n    }\n    if (box.y < ihit.y) {\n      y_in_box = box.y < ihit.y && ihit.y < box.y + box.h;\n    } else {\n      y_in_box = ihit.y < box.y && box.y < ihit.y + ihit.h;\n    }\n\n    const cdot = constant.torchka.dot;\n    for (let row of torchka) {\n      for (let dot of row) {\n        const dhit = {\n          x: dot.x + cdot.offset.x,\n          y: dot.y + cdot.offset.y,\n          w: cdot.size.w,\n          h: cdot.size.h,\n        };\n\n        let x_in_invader, y_in_invader;\n        if (ihit.x < dhit.x) {\n          x_in_invader = ihit.x < dhit.x && dhit.x < ihit.x + ihit.w;\n        } else {\n          x_in_invader = dhit.x < ihit.x && ihit.x < dhit.x + dhit.w;\n        }\n        if (ihit.y < dhit.y) {\n          y_in_invader = ihit.y < dhit.y && dhit.y < ihit.y + ihit.h;\n        } else {\n          y_in_invader = dhit.y < ihit.y && ihit.y < dhit.y + dhit.h;\n        }\n\n        if (x_in_invader && y_in_invader) {\n            dot.enabled = false;\n        }\n      }\n    }\n  }\n};\n\nconst update_one_invader = (state, i, j, invader, turn) => {\n  if (turn) {\n    invader.y += constant.invaders.speed.y;\n  }\n\n  if (invader.state.kind == constant.INVADER_DYING) {\n    if (state.frames > invader.state.changed_at + 10) {\n      invader.state.kind = constant.INVADER_DISABLED;\n      return;\n    }\n  }\n\n  collide_with_torchka(state, invader);\n\n  const cannon_shot_moving = state.cannon.shot.state.kind == constant.CANNON_SHOT_MOVING;\n  if (cannon_shot_moving && is_hit(state.cannon.shot, invader)) {\n    kill_invader(state, state.cannon.shot, i, j, invader);\n    return;\n  }\n\n  const { bottoms } = get_alive_idx(state);\n  for (let bottom of bottoms) {\n    if (can_shoot(state, bottom, i, j, invader)) {\n      shoot(state, invader, state.invaders.shot[i]);\n    }\n  }\n\n  invader.to_shot--;\n};\n\nconst move = (state, invader) => {\n  if (invader.state.kind != constant.INVADER_ALIVE) {\n    return\n  }\n\n  invader.current_char = (invader.current_char + 1) % invader.char.length;\n\n  if (state.invaders.direction_right) {\n    invader.x += constant.invaders.speed.x;\n  } else {\n    invader.x -= constant.invaders.speed.x;\n  }\n};\n\nconst on_edge = (state) => {\n  let { left, right } = get_alive_idx(state);\n  const { left: edge_left, right: edge_right } = constant.config.edge;\n\n  const invaders = state.invaders.array;\n  let most_left, most_right;\n  if (left == null) most_left = null; else most_left = invaders[index(left.i, left.j)];\n  if (right == null) most_right = null; else most_right = invaders[index(right.i, right.j)];\n  state.debug.invaders.alive.most_left = left;\n  state.debug.invaders.alive.most_right = right;\n\n  const on_left_edge = most_left != null && most_left.x < edge_left;\n  const on_right_edge = most_right != null && most_right.x > edge_right - 25;\n\n  const to_right = state.invaders.direction_right;\n  return (to_right && on_right_edge) || (!to_right && on_left_edge);\n};\n\nconst next_invader_idx = (state) => {\n  state.invaders.current++;\n  state.invaders.current %= state.invaders.array.length;\n\n  let invader = state.invaders.array[state.invaders.current];\n  while (invader.state.kind != constant.INVADER_ALIVE) {\n    if (state.invaders.number_of_alive <= 0) {\n      break;\n    }\n\n    state.invaders.current++;\n    state.invaders.current %= state.invaders.array.length;\n    invader = state.invaders.array[state.invaders.current];\n  }\n};\n\nexport const init = (game, state) => {\n  let invader = state.invaders.array[state.invaders.current];\n  invader.state.kind = constant.INVADER_ALIVE;\n  state.invaders.number_of_alive++;\n\n  state.invaders.current++;\n\n  const all_invaders = constant.config.rows * constant.config.columns;\n  if (state.invaders.current == all_invaders) {\n    state.invaders.current = 0;\n    state.kind = constant.GAME_PLAYING;\n    state.changed_at = state.frames;\n  }\n};\n\nconst invader_reached_ground = (game, state) => {\n  if (state.kind != constant.GAME_PLAYING) {\n    return;\n  }\n\n  let bottoms = [].concat(get_alive_idx(state).bottoms);\n  bottoms.sort((a, b) => (a == null ? 1 : b == null ? -1 : b.j < a.j ? 1 : -1));\n\n  if (bottoms[0] != null) {\n    const invader = state.invaders.array[index(bottoms[0].i, bottoms[0].j)];\n\n    if (invader.y > constant.config.edge.bottom - 20) {\n      state.kind = constant.GAME_PLAYER_DEFEATED;\n      state.changed_at = state.frames;\n      state.cannon.state.kind = constant.CANNON_DYING;\n      state.cannon.state.changed_at = state.frames;\n    }\n  }\n};\n\nexport const proc = (game, state) => {\n  reset_alive_checker();\n  iterate_all_invaders(check_one_invader, state);\n\n  invader_reached_ground(game, state);\n\n  const { first: first_invader_idx } = get_alive_idx(state);\n  const on_first_invader_moving = state.invaders.current == first_invader_idx;\n  if (on_edge(state) && on_first_invader_moving) {\n    state.invaders.direction_right = !state.invaders.direction_right;\n    iterate_all_invaders(update_one_invader, state, true);\n  } else {\n    iterate_all_invaders(update_one_invader, state, false);\n  }\n\n  const current = state.invaders.current;\n  move(state, state.invaders.array[current]);\n\n  if (state.kind == constant.GAME_PLAYING && state.invaders.number_of_alive == 0) {\n    state.kind = constant.GAME_PLAYER_WON;\n    state.changed_at = state.frames;\n    return;\n  }\n\n  next_invader_idx(state);\n};\n","const constant = require('./constant.js');\n\nconst move_cannon_shot = (game, state) => {\n  const cannon = state.cannon;\n  let shot = state.cannon.shot;\n\n  switch (shot.state.kind) {\n  case constant.CANNON_SHOT_DISABLED:\n    if (game.input.shot && cannon.state.kind == constant.CANNON_ALIVE) {\n      shot.x = state.cannon.x;\n      shot.y = state.cannon.y - 35;\n      shot.state.kind = constant.CANNON_SHOT_MOVING;\n      state.ufo.score.ptr = (state.ufo.score.ptr + 1) % state.ufo.score.table.length;\n    }\n    break;\n\n  case constant.CANNON_SHOT_MOVING:\n    shot.y -= 10;\n    if (shot.y < constant.config.edge.top) {\n      shot.state.kind = constant.CANNON_SHOT_DYING;\n      shot.state.changed_at = state.frames;\n    }\n    break;\n\n  case constant.CANNON_SHOT_DYING:\n    if (state.frames > shot.state.changed_at + 10) {\n      shot.state.kind = constant.CANNON_SHOT_DISABLED;\n    }\n    break;\n  }\n};\n\nconst move_invader_shot = (game, state) => {\n  for (let shot of state.invaders.shot) {\n    switch (shot.state.kind) {\n    case constant.INVADER_SHOT_MOVING:\n      shot.y += 4;\n\n      if (state.frames % 5 == 0) {\n        shot.current_char++;\n        shot.current_char %= shot.char.length;\n      }\n\n      if (shot.y -  constant.invaders.shot.hit.offset.y > constant.config.edge.bottom) {\n        shot.state.kind = constant.INVADER_SHOT_DISABLED;\n      }\n      break;\n\n    case constant.INVADER_SHOT_DYING:\n      if (state.frames > shot.state.changed_at + 10) {\n        shot.state.kind = constant.INVADER_SHOT_DISABLED;\n      }\n      break;\n    }\n  }\n};\n\nconst kill_cannon = (state, cannon, shot) => {\n  shot.state.kind = constant.INVADER_SHOT_DISABLED;\n  cannon.state.kind = constant.CANNON_DYING;\n  cannon.char = constant.cannon_dying_anim_pattern;\n  cannon.state.changed_at = state.frames;\n  cannon.life--;\n};\n\nconst detect_hit_invader_shot = (game, state) => {\n  let cannon = state.cannon;\n  for (let shot of state.invaders.shot) {\n    if (shot.state.kind == constant.INVADER_SHOT_DISABLED) {\n      continue;\n    }\n\n    const shot_hit_x = shot.x + constant.invaders.shot.hit.offset.x;\n    const shot_hit_y = shot.y;\n    const cannon_hit = {\n      x1: cannon.x + constant.cannon.hit.offset.x,\n      x2: cannon.x + constant.cannon.hit.offset.x + constant.cannon.hit.size.w,\n      y1: cannon.y + constant.cannon.hit.offset.y,\n      y2: cannon.y + constant.cannon.hit.offset.y + constant.cannon.hit.size.h,\n    };\n\n    const hit_x = cannon_hit.x1 < shot_hit_x && shot_hit_x < cannon_hit.x2;\n    const hit_y = cannon_hit.y1 < shot_hit_y && shot_hit_y < cannon_hit.y2;\n\n    if (hit_x && hit_y) {\n      kill_cannon(state, cannon, shot);\n    }\n  }\n};\n\nconst detect_hit_with_invader_and_cannon_shot = (state) => {\n  let cannon_shot = state.cannon.shot;\n  if (cannon_shot.state.kind != constant.CANNON_SHOT_MOVING) {\n    return;\n  }\n\n  for (let invader_shot of state.invaders.shot) {\n    if (invader_shot.state.kind != constant.INVADER_SHOT_MOVING) {\n      continue;\n    }\n\n    const hit_x = Math.abs(cannon_shot.x - (invader_shot.x + 10)) < 10;\n    const hit_y = Math.abs(cannon_shot.y - invader_shot.y) < 6;\n\n    if (hit_x && hit_y) {\n      cannon_shot.state.kind = constant.CANNON_SHOT_DYING;\n      cannon_shot.state.changed_at = state.frames;\n      invader_shot.state.kind = constant.INVADER_SHOT_DYING;\n      invader_shot.state.changed_at = state.frames;\n    }\n  }\n};\n\nexport const proc = (game, state) => {\n  move_cannon_shot(game, state);\n  move_invader_shot(game, state);\n  detect_hit_with_invader_and_cannon_shot(state);\n  detect_hit_invader_shot(game, state);\n};\n","const constant = require('./constant.js');\n\nconst move_ufo = (game, state) => {\n  let ufo = state.ufo;\n\n  if (ufo.state.kind == constant.UFO_ALIVE) {\n\n    if (ufo.type == 0) {\n      ufo.x += constant.ufo.speed.x;\n\n      if (ufo.x > constant.ufo.initial.x[ufo.type + 1]) {\n        ufo.state.kind = constant.UFO_DISABLED;\n        ufo.state.changed_at = state.frames;\n      }\n\n    } else {\n      ufo.x -= constant.ufo.speed.x;\n\n      if (ufo.x < constant.ufo.initial.x[ufo.type - 1]) {\n        ufo.state.kind = constant.UFO_DISABLED;\n        ufo.state.changed_at = state.frames;\n      }\n    }\n  }\n};\n\nconst update_ufo = (game, state) => {\n  let ufo = state.ufo;\n\n  switch (ufo.state.kind) {\n  case constant.UFO_DISABLED:\n    if (state.frames >= ufo.state.changed_at + constant.ufo.interval) {\n      ufo.state.kind = constant.UFO_ALIVE;\n      ufo.state.changed_at = state.frames;\n      ufo.type = (ufo.type + 1) % constant.ufo.str.length;\n      ufo.x = constant.ufo.initial.x[ufo.type];\n    }\n    break;\n\n  case constant.UFO_DYING:\n    if (state.frames - ufo.state.changed_at % 10 == 0) {\n      ufo.current_char = (ufo.current_char + 1) % ufo.char.length;\n    }\n\n    if (state.frames > ufo.state.changed_at + 15) {\n      ufo.state.kind = constant.UFO_DISABLED;\n      ufo.state.changed_at = state.frames;\n    }\n\n    break;\n  }\n};\n\nconst detect_hit_by_cannon_shot = (game, state) => {\n  let shot = state.cannon.shot;\n  let ufo = state.ufo;\n\n  if (shot.state.kind != constant.CANNON_SHOT_MOVING) return;\n  if (ufo.state.kind != constant.UFO_ALIVE) return;\n\n  const shot_hit_x = shot.x + constant.cannon.shot.hit.offset.x;\n  const shot_hit_y = shot.y;\n  const ufo_hit = {\n    x: ufo.x + constant.ufo.hit.offset.x,\n    y: ufo.y + constant.ufo.hit.offset.y,\n    w: constant.ufo.hit.size.w,\n    h: constant.ufo.hit.size.h,\n  };\n\n  const in_ufo_x = ufo_hit.x < shot_hit_x && shot_hit_x < ufo_hit.x + ufo_hit.w;\n  const in_ufo_y = ufo_hit.y < shot_hit_y && shot_hit_y < ufo_hit.y + ufo_hit.h;\n\n  if (in_ufo_x && in_ufo_y) {\n    shot.state.kind = constant.CANNON_SHOT_DYING;\n    shot.state.changed_at = state.frames;\n    ufo.state.kind = constant.UFO_DYING;\n    ufo.state.changed_at = state.frames;\n    state.score += ufo.score.table[ufo.score.ptr];\n  }\n};\n\nexport const proc = (game, state) => {\n  move_ufo(game, state);\n  detect_hit_by_cannon_shot(game, state);\n  update_ufo(game, state);\n};\n","const constant = require('./constant.js');\n\nconst iterate_torchka_dots = (state, in_area_fn, collide_fn) => {\n  for (let n = 0; n < state.torchka.array.length; n++) {\n    let torchka = state.torchka.array[n];\n    const topleft = constant.torchka.toplefts[n];\n    const box = {\n      x: topleft.x,\n      y: topleft.y,\n      w: torchka[0].length * constant.torchka.dot.size.w,\n      h: torchka.length * constant.torchka.dot.size.h * constant.torchka.dot.scale.y + 20,\n    };\n\n    if (!in_area_fn(state, box)) {\n      continue;\n    }\n\n    for (let row of torchka) {\n      for (let dot of row) {\n        collide_fn(state, dot);\n      }\n    }\n  }\n}\n\nconst invader_shot_in_box = (state, box) => {\n  let result = false;\n  for (let shot of state.invaders.shot) {\n    if (shot.state.kind != constant.INVADER_SHOT_MOVING) {\n      continue;\n    }\n\n    const shot_hit = {\n      x: shot.x + constant.invaders.shot.hit.offset.x,\n      y: shot.y,\n    };\n\n    const in_x = box.x < shot_hit.x && shot_hit.x < box.x + box.w;\n    const in_y = box.y < shot_hit.y && shot_hit.y < box.y + box.h;\n\n    result |= in_x && in_y;\n  }\n\n  return result;\n};\n\nconst detect_hit_invader_shot = (state, dot) => {\n  const cdot = constant.torchka.dot;\n  if (!dot.enabled) {\n    return;\n  }\n\n  for (let shot of state.invaders.shot) {\n    if (shot.state.kind != constant.INVADER_SHOT_MOVING) {\n      continue;\n    }\n\n    const shot_hit = {\n      x: shot.x + constant.invaders.shot.hit.offset.x,\n      y: shot.y,\n    };\n    const dot_hit = {\n      x: dot.x + cdot.offset.x,\n      y: dot.y + cdot.offset.y,\n      w: cdot.size.w,\n      h: cdot.size.h,\n    };\n\n    const hit_x = dot_hit.x < shot_hit.x && shot_hit.x < dot_hit.x + dot_hit.w;\n    const hit_y = dot_hit.y < shot_hit.y && shot_hit.y < dot_hit.y + dot_hit.h;\n\n    if (hit_x && hit_y) {\n      shot.state.kind = constant.INVADER_SHOT_DYING;\n      shot.state.changed_at = state.frames;\n      dot.enabled = false;\n    }\n  }\n};\n\nconst cannon_shot_in_box = (state, box) => {\n  let shot = state.cannon.shot;\n  if (shot.state.kind != constant.INVADER_SHOT_MOVING) {\n    return false;\n  }\n\n  const shot_hit = {\n    x: shot.x + constant.cannon.shot.hit.offset.x,\n    y: shot.y,\n  };\n\n  const in_x = box.x < shot_hit.x && shot_hit.x < box.x + box.w;\n  const in_y = box.y < shot_hit.y && shot_hit.y < box.y + box.h;\n\n  return in_x && in_y;\n};\n\nconst detect_hit_cannon_shot = (state, dot) => {\n  const cdot = constant.torchka.dot;\n  if (!dot.enabled) {\n    return;\n  }\n\n  let shot = state.cannon.shot;\n  if (shot.state.kind != constant.CANNON_SHOT_MOVING) {\n    return;\n  }\n\n  const shot_hit = {\n    x: shot.x + constant.cannon.shot.hit.offset.x,\n    y: shot.y,\n  };\n  const dot_hit = {\n    x: dot.x + cdot.offset.x,\n    y: dot.y + cdot.offset.y,\n    w: cdot.size.w,\n    h: cdot.size.h,\n  };\n\n  const hit_x = dot_hit.x < shot_hit.x && shot_hit.x < dot_hit.x + dot_hit.w;\n  const hit_y = dot_hit.y < shot_hit.y && shot_hit.y < dot_hit.y + dot_hit.h;\n\n  if (hit_x && hit_y) {\n    shot.state.kind = constant.CANNON_SHOT_DYING;\n    shot.state.changed_at = state.frames;\n    dot.enabled = false;\n  }\n};\n\nconst in_box = (state, box) => {\n  return invader_shot_in_box(state, box) || cannon_shot_in_box(state, box);\n};\n\nconst collide = (state, dot) => {\n  // this has done in invader.js because of use bounding box with each invader\n  //detect_hit_with_invaders(state, dot);\n  detect_hit_invader_shot(state, dot);\n  detect_hit_cannon_shot(state, dot);\n};\n\nexport const proc = (game, state) => {\n  iterate_torchka_dots(state, in_box, collide);\n};\n","const constant = require('./constant.js');\nconst state = require('./state.js');\nconst draw = require('./draw.js');\nconst cannon = require('./cannon.js');\nconst invader = require('./invader.js');\nconst shot = require('./shot.js');\nconst ufo = require('./ufo.js');\nconst torchka = require('./torchka.js');\n\nconst proc = (game, game_state) => {\n  switch (game_state.kind) {\n  case constant.GAME_INITIALIZING:\n    draw.proc(game, game_state);\n    invader.init(game, game_state);\n    break;\n\n  case constant.GAME_PLAYING:\n    draw.proc(game, game_state);\n\n    cannon.proc(game, game_state);\n    if (game_state.cannon.state.kind == constant.CANNON_ALIVE) {\n      invader.proc(game, game_state);\n    }\n    ufo.proc(game, game_state);\n    torchka.proc(game, game_state);\n    shot.proc(game, game_state);\n    break;\n\n  case constant.GAME_PLAYER_WON:\n    draw.proc(game, game_state);\n\n    invader.proc(game, game_state);\n    shot.proc(game, game_state);\n\n    if (game_state.frames > game_state.changed_at + 100) {\n      let new_state = state.setup_state();\n      new_state.cannon.life = game_state.cannon.life;\n      new_state.score = game_state.score;\n      new_state.kind = constant.GAME_INITIALIZING;\n      return new_state;\n    }\n\n    break;\n\n  case constant.GAME_PLAYER_DEFEATED:\n    draw.proc(game, game_state);\n    const message = 'G  A  M  E    O  V  E  R';\n\n    game.ctx.fillStyle = '#eee';\n    game.ctx.fillRect(210, 230, 200, 28);\n\n    game.ctx.font = '20px Noto Sans JP';\n    game.ctx.fillStyle = '#000';\n    const elapsed = game_state.frames - game_state.changed_at;\n    const m = message.slice(0, Math.floor(elapsed / 10));\n    game.ctx.fillText(m, 210 + 10, 230 + 23);\n\n    if (game_state.frames > game_state.changed_at + 300) {\n      game_state.go_title = true;\n      if (game_state.score > game.hiscore) {\n        game.hiscore = game_state.score;\n      }\n    }\n\n    break;\n  }\n\n  game_state.frames++;\n  return null;\n};\n\nexport const make_scene = (game) => {\n  game.state = state.setup_state();\n\n  const frame_fn = () => {\n    let new_state = proc(game, game.state);\n    if (new_state != null) {\n      game.state = new_state;\n    }\n\n    if (game.state.go_title) {\n      game.go_title_scene(game);\n    }\n  };\n\n  return frame_fn;\n};\n","export const data = [\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 8, 8, 8, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9,10, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9,10, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9,10,10, 0,10,10,10,10,11,11,],\n  [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,10,10,10,10,10,10,10,11,11,11,],\n  [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9,10,10,10,10,10,10,10,11,11, 0,],\n  [ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 0, 0,10,10,10, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,10,10,10, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,10,10,10, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 9,10,10,10,10, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 4, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,11, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 0, 0, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,10,10,10,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0,10,10,10,10,11,11,11,11,11, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,11,11,11,11,11,11,11, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10, 0, 0, 0, 0, 0, 0, 0, 0,11,11,11, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,11, 0, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,11,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,10,10,11,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,11,11,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0,10,10,10,10,10,11,11,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9,10,10,10,10,10,10,10,11,11,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,11,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,11,11,11,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10,10,10,11,11,11,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,10,10,10,10,10, 0, 0, 0, 0, 0, 0,11, 0, 0, 0, 0, 0, 0, 0,],\n  [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],\n];\n","const logo = require('./logo.js');\n\n\nconst char1 = '一二三四五六七八九文字渦';\n\nconst setup_state = () => {\n  let state = {\n    frames: 0,\n    char: char1,\n    char_pos: 1,\n    disp_v: 1,\n    ready: false,\n  };\n\n  return state;\n};\n\nconst nf = new Intl.NumberFormat(\"ja-JP-u-nu-hanidec\", {minimumIntegerDigits: 5, useGrouping: false});\n\nconst draw = (game, state) => {\n  game.ctx.clearRect(0, 0, game.canvas.width, game.canvas.height);\n  const { ox, oy } = { ox: 60, oy: 50 };\n  game.ctx.font = '6px Noto Serif JP';\n  game.ctx.fillStyle = '#000';\n\n  for (let j = 0; j < logo.data.length; j++) {\n    for (let i = 0; i < logo.data[0].length; i++) {\n      const v = logo.data[j][i];\n      if (v == 0) continue;\n      if (state.disp_v != -1 && v != state.disp_v) continue;\n\n      let ch = state.char[state.char_pos];\n\n      const { x, y } = {\n        x: ox + i * 6,\n        y: oy + j * 6,\n      };\n      game.ctx.fillText(ch, x, y);\n    }\n  }\n\n  if (state.ready) {\n    game.ctx.font = '15px Noto Serif JP';\n    game.ctx.fillText(`I d e o g r a p h i c   S p a c e   I n v a d e r s`, 170, 330);\n\n    game.ctx.font = '15px Noto Serif JP';\n    game.ctx.fillText(`最高得点　${nf.format(game.hiscore)}`, 250, 380);\n    if (Math.sin(state.frames / 10) > 0) {\n      game.ctx.fillText(`Press J key`, 250, 400);\n    }\n  }\n};\n\nconst scene1 = 5 * 11 * 2;\nconst scene2 = 5 * 10;\n\nconst proc = (game, state) => {\n  if (state.frames < scene1) {\n    if (state.frames % 5 == 0) {\n      state.disp_v = (state.disp_v + 1) % 11;\n    }\n  }\n\n  if (state.frames >= scene1 && state.frames < scene1 + scene2) {\n    state.disp_v = -1;\n    if (state.frames % 5 == 0) {\n      //state.disp_v = state.disp_v == -1 ? 0 : -1;\n      state.char_pos = (state.char_pos + 1) % char1.length;\n    }\n  }\n\n  if (state.frames >= scene1 + scene2) {\n    state.ready = true;\n    if (game.input.shot) {\n      return true;\n    }\n\n    if (Math.sin(state.frames / 40) > 0) {\n      if (state.frames % 5 == 0) {\n        //state.disp_v = state.disp_v == -1 ? 0 : -1;\n        state.char_pos = (state.char_pos + 1) % char1.length;\n      }\n    }\n  }\n\n  state.frames++;\n  return false;\n};\n\nexport const make_scene = (game) => {\n  game.state = setup_state();\n\n  const frame_fn = () => {\n    draw(game, game.state);\n    const next = proc(game, game.state)\n\n    if (next) {\n      game.go_game_scene(game);\n    }\n  };\n\n  return frame_fn;\n};\n","const game_scene = require('./game_scene/');\nconst title_scene = require('./title_scene/');\n\nconst setup = () => {\n  const canvas = document.getElementById('tensho-game');\n  const ctx = canvas.getContext('2d');\n\n  let input = {\n    left: false,\n    right: false,\n    shot: false,\n  };\n  document.addEventListener('keydown', (e) => {\n    switch (e.code) {\n      case 'KeyA':\n        input.left = true;\n        break;\n      case 'KeyD':\n        input.right = true;\n        break;\n      case 'KeyJ':\n        input.shot = true;\n        break;\n    }\n  });\n  document.addEventListener('keyup', (e) => {\n    switch (e.code) {\n      case 'KeyA':\n        input.left = false;\n        break;\n      case 'KeyD':\n        input.right = false;\n        break;\n      case 'KeyJ':\n        input.shot = false;\n        break;\n    }\n  });\n\n  let game = {\n    canvas: canvas,\n    ctx: ctx,\n    input: input,\n    debug: false,\n\n    scene: null,\n    state: null,\n    hiscore: 0,\n\n    go_title_scene: (game) => {\n      game.scene = title_scene.make_scene(game);\n    },\n    go_game_scene: (game) => {\n      game.scene = game_scene.make_scene(game);\n    },\n  };\n\n  game.go_title_scene(game);\n  return game;\n};\n\nexport const start = () => {\n  let game = setup();\n\n  const frame_fn = () => {\n    if (game.scene != null) {\n      game.scene();\n    }\n\n    window.requestAnimationFrame(frame_fn);\n  }\n\n  frame_fn();\n};\n","const invader_game = require('./invader_game/');\n\ninvader_game.start();\n"]}